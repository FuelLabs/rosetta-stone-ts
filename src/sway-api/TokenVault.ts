/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.101.3
*/

import { Contract as __Contract, Interface } from "fuels";
import type {
  Provider,
  Account,
  StorageSlot,
  Address,
  BigNumberish,
  BN,
  FunctionFragment,
  InvokeFunction,
  StrSlice,
} from 'fuels';

import type { Enum } from "./common";

export type IdentityInput = Enum<{ Address: AddressInput, ContractId: ContractIdInput }>;
export type IdentityOutput = Enum<{ Address: AddressOutput, ContractId: ContractIdOutput }>;

export type AddressInput = { bits: string };
export type AddressOutput = AddressInput;
export type AssetIdInput = { bits: string };
export type AssetIdOutput = AssetIdInput;
export type ContractIdInput = { bits: string };
export type ContractIdOutput = ContractIdInput;
export type DepositEventInput = { user: IdentityInput, amount: BigNumberish, asset_id: AssetIdInput };
export type DepositEventOutput = { user: IdentityOutput, amount: BN, asset_id: AssetIdOutput };
export type WithdrawEventInput = { user: IdentityInput, amount: BigNumberish, asset_id: AssetIdInput };
export type WithdrawEventOutput = { user: IdentityOutput, amount: BN, asset_id: AssetIdOutput };

export type TokenVaultConfigurables = Partial<{
  ADMIN: IdentityInput;
  CROSS_CONTRACT_CALL: ContractIdInput;
}>;

const abi = {
  "programType": "contract",
  "specVersion": "1",
  "encodingVersion": "1",
  "concreteTypes": [
    {
      "type": "()",
      "concreteTypeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
    },
    {
      "type": "enum std::identity::Identity",
      "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335",
      "metadataTypeId": 1
    },
    {
      "type": "str",
      "concreteTypeId": "8c25cb3686462e9a86d2883c5688a22fe738b0bbc85f458d2d2b5f3f667c6d5a"
    },
    {
      "type": "struct DepositEvent",
      "concreteTypeId": "4cbaf09c9b93968169a85305ccab972bca7ee522231dce41371a1cbf301889dd",
      "metadataTypeId": 2
    },
    {
      "type": "struct WithdrawEvent",
      "concreteTypeId": "38137bbd35f3146e62f8d77f86ea763072c970911cc7cf099d0fec011b00b103",
      "metadataTypeId": 3
    },
    {
      "type": "struct std::contract_id::ContractId",
      "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54",
      "metadataTypeId": 6
    },
    {
      "type": "u64",
      "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
    }
  ],
  "metadataTypes": [
    {
      "type": "b256",
      "metadataTypeId": 0
    },
    {
      "type": "enum std::identity::Identity",
      "metadataTypeId": 1,
      "components": [
        {
          "name": "Address",
          "typeId": 4
        },
        {
          "name": "ContractId",
          "typeId": 6
        }
      ]
    },
    {
      "type": "struct DepositEvent",
      "metadataTypeId": 2,
      "components": [
        {
          "name": "user",
          "typeId": 1
        },
        {
          "name": "amount",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "asset_id",
          "typeId": 5
        }
      ]
    },
    {
      "type": "struct WithdrawEvent",
      "metadataTypeId": 3,
      "components": [
        {
          "name": "user",
          "typeId": 1
        },
        {
          "name": "amount",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "asset_id",
          "typeId": 5
        }
      ]
    },
    {
      "type": "struct std::address::Address",
      "metadataTypeId": 4,
      "components": [
        {
          "name": "bits",
          "typeId": 0
        }
      ]
    },
    {
      "type": "struct std::asset_id::AssetId",
      "metadataTypeId": 5,
      "components": [
        {
          "name": "bits",
          "typeId": 0
        }
      ]
    },
    {
      "type": "struct std::contract_id::ContractId",
      "metadataTypeId": 6,
      "components": [
        {
          "name": "bits",
          "typeId": 0
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "cross_contract_deposit",
      "inputs": [
        {
          "name": "user",
          "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
        }
      ],
      "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
      "attributes": [
        {
          "name": "doc-comment",
          "arguments": [
            " Cross-contract transfer demonstration."
          ]
        },
        {
          "name": "payable",
          "arguments": []
        },
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "name": "deposit",
      "inputs": [],
      "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
      "attributes": [
        {
          "name": "doc-comment",
          "arguments": [
            " Deposit tokens into the vault."
          ]
        },
        {
          "name": "payable",
          "arguments": []
        },
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "name": "get_deposit",
      "inputs": [
        {
          "name": "user",
          "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
        }
      ],
      "output": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
      "attributes": [
        {
          "name": "doc-comment",
          "arguments": [
            " Get the deposit amount for a user."
          ]
        },
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "name": "get_total_deposits",
      "inputs": [],
      "output": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
      "attributes": [
        {
          "name": "doc-comment",
          "arguments": [
            " Get total deposits in the vault."
          ]
        },
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "name": "get_vault_balance",
      "inputs": [],
      "output": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
      "attributes": [
        {
          "name": "doc-comment",
          "arguments": [
            " Get the vault's balance of the accepted token."
          ]
        },
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "name": "withdraw",
      "inputs": [
        {
          "name": "amount",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ],
      "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
      "attributes": [
        {
          "name": "doc-comment",
          "arguments": [
            " Withdraw tokens from the vault."
          ]
        },
        {
          "name": "payable",
          "arguments": []
        },
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    }
  ],
  "loggedTypes": [
    {
      "logId": "10098701174489624218",
      "concreteTypeId": "8c25cb3686462e9a86d2883c5688a22fe738b0bbc85f458d2d2b5f3f667c6d5a"
    },
    {
      "logId": "5528996047966410369",
      "concreteTypeId": "4cbaf09c9b93968169a85305ccab972bca7ee522231dce41371a1cbf301889dd"
    },
    {
      "logId": "4040709343265625198",
      "concreteTypeId": "38137bbd35f3146e62f8d77f86ea763072c970911cc7cf099d0fec011b00b103"
    }
  ],
  "messagesTypes": [],
  "configurables": [
    {
      "name": "ADMIN",
      "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335",
      "offset": 19776,
      "indirect": false
    },
    {
      "name": "CROSS_CONTRACT_CALL",
      "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54",
      "offset": 19816,
      "indirect": false
    }
  ],
  "errorCodes": {}
};

const storageSlots: StorageSlot[] = [
  {
    "key": "b696e3e0fa79386fc5f054d9f73958ddee2fe7e0f65ccf9b3e2253122b60ec88",
    "value": "0000000000000000000000000000000000000000000000000000000000000000"
  }
];

export class TokenVaultInterface extends Interface {
  constructor() {
    super(abi);
  }

  declare functions: {
    cross_contract_deposit: FunctionFragment;
    deposit: FunctionFragment;
    get_deposit: FunctionFragment;
    get_total_deposits: FunctionFragment;
    get_vault_balance: FunctionFragment;
    withdraw: FunctionFragment;
  };
}

export class TokenVault extends __Contract {
  static readonly abi = abi;
  static readonly storageSlots = storageSlots;

  declare interface: TokenVaultInterface;
  declare functions: {
    cross_contract_deposit: InvokeFunction<[user: IdentityInput], void>;
    deposit: InvokeFunction<[], void>;
    get_deposit: InvokeFunction<[user: IdentityInput], BN>;
    get_total_deposits: InvokeFunction<[], BN>;
    get_vault_balance: InvokeFunction<[], BN>;
    withdraw: InvokeFunction<[amount: BigNumberish], void>;
  };

  constructor(
    id: string | Address,
    accountOrProvider: Account | Provider,
  ) {
    super(id, abi, accountOrProvider);
  }
}
